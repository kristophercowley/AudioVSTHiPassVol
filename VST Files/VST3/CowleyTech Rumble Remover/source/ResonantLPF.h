/*
	UserPlugIn.h File Generated by DSP Designer
	Copyright(c) 2010 Will Pirkle

	For Academic Use Only
*/

#pragma once

#include "pluginconstants.h"
#include "plugin.h"


// abstract base class for DSP filters
class CResonantLPF : public CPlugIn
{
public:	// Plug-In API Functions
	// Plug-In API Member Methods:
	// The followung 8 methods must be impelemented for a meaningful Plug-In
	//
	// 1. One Time Initialization
	CResonantLPF();

	// 2. One Time Destruction
	virtual ~CResonantLPF(void);

	// 3. initUI() is called when the UI needs to be updated to reflect a Preset Load or Initial State
	virtual bool __stdcall initUI();

	// 4. Initialization for after the Plug-In has been instantiated
	virtual bool __stdcall init();

	// 5. The Prepare For Play Function is called just before the first Process function
	virtual bool __stdcall prepareForPlay();

	// 6. pause() is called when the audio data stops streaming
	virtual bool __stdcall pause();

	// 7. processAudioFrame() processes an audio input to create an audio output
	virtual bool __stdcall processAudioFrame(float* pInputBuffer, float* pOutputBuffer, UINT uNumInputChannels, UINT uNumOutputChannels);

	// 8. userInterfaceChange() occurs when the user moves a control.
	virtual bool __stdcall userInterfaceChange(int nControlIndex);


	// OPTIONAL ADVANCED METHODS ------------------------------------------------------------------------------------------------
	// These are more advanced; see the book for more details
	//
	// 9. joystickControlChange() occurs when the user moves a control.
	virtual bool __stdcall joystickControlChange(float fControlA, float fControlB, float fControlC, float fControlD);

	// 10. process buffers instead of Frames:
	// NOTE: set m_bWantBuffers = true to use this function
	virtual bool __stdcall processSocketAudioBuffer(float* pInputBuffer, float* pOutputBuffer, UINT uNumInputChannels, UINT uNumOutputChannels, UINT uBufferSize);

	// 11. rocess buffers instead of Frames:
	// NOTE: set m_bWantVSTBuffers = true to use this function
	virtual bool __stdcall processVSTAudioBuffer(float** ppInputs, float** ppOutputs, UINT uNumChannels, int uNumFrames);

	// 12. MIDI Note On Event
	virtual bool __stdcall midiNoteOn(UINT uChannel, UINT uMIDINote, UINT uVelocity);

	// 13. MIDI Note Off Event
	virtual bool __stdcall midiNoteOff(UINT uChannel, UINT uMIDINote, UINT uVelocity, bool bAllNotesOff);

	// 14. all MIDI messages -
	// NOTE: set m_bWantAllMIDIMessages true to get everything else (other than note on/off)
	virtual bool __stdcall midiMessage(unsigned char cChannel, unsigned char cStatus, unsigned char cData1, unsigned char cData2);


	// Add your code here: ----------------------------------------------------------- //
	CBiQuad m_LeftLPF;
	CBiQuad m_RightLPF;

	float c0;
	float d0;

	void calculateConstQCoeffs(float fCutoffFreq, float fQ);
	void calculateParametricCoeffs(float fCutoffFreq, float fQ);
	void calculateLPFCoeffs(float fCutoffFreq, float fQ);
	void calculateB2LPFCoeffs(float fCutoffFreq, float fQ);
	void calculateB2HPFCoeffs(float fCutoffFreq, float fQ);
	void calculateB2BPFCoeffs(float fCutoffFreq, float fQ);
	void calculateB2BSFCoeffs(float fCutoffFreq, float fQ);
	void calculateBPFCoeffs(float fCutoffFreq, float fQ);
	void calculateBSFCoeffs(float fCutoffFreq, float fQ);
	void calculateAnalogModelLPFCoeffs(float fCutoffFreq, float fQ, int nOrder);
	void calculateMMALPFCoeffs(float fCutoffFreq, float fQ);
	void calculateResonatorCoeffs(float fCutoffFreq, float fQ);
	void calculateImprovedResonatorCoeffs(float fCutoffFreq, float fQ);
	// END OF USER CODE -------------------------------------------------------------- //


	// ADDED BY SOCKET -- DO NOT EDIT THIS CODE!!! ----------------------------------- //
	//  **--0x07FD--**

	float m_f_fc_Hz;
	float m_f_Q;
	float m_fBoostCut;
	UINT m_uType;
	enum{DigiLP1,DigiLP2,Mass1,Mass2,MMALPF,Rez1,Rez2,BPF,BSF,B2L,B2H,B2BPF,B2BSF,Param,ConstQ};
	float m_fMeterValue;

	// **--0x1A7F--**
	// ------------------------------------------------------------------------------- //

};







































































































